{"ast":null,"code":"var _jsxFileName = \"/Users/ammarhussain/Desktop/TMF-frontend/src/components/BoldText.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// const BoldText = ({ text }) => {\n//     const parseText = (inputText) => {\n//       const parts = inputText.split(/(\\*\\*.*?\\*\\*|##.*?##)/); \n//       return parts.map((part, index) => {\n//         if (part.startsWith(\"**\") && part.endsWith(\"**\")) {\n//           return (\n//             <strong key={index}>\n//               {part.slice(2, -2)} {/* Remove ** */}\n//             </strong>\n//           );\n//         }\n//         if (part.startsWith(\"##\") && part.endsWith(\"##\")) {\n//           return (\n//             <strong key={index} style={{ fontSize: \"larger\" }}>\n//               {part.slice(2, -2)} {/* Remove ## */}\n//             </strong>\n//           );\n//         }\n//         return part; \n//       });\n//     };\n\n//     return <div>{parseText(text)}</div>;\n//   };\n\nconst BoldText = ({\n  text\n}) => {\n  const parseText = inputText => {\n    const parts = inputText.split(/(\\n## .*?(\\n|$)|\\*\\*.*?\\*\\*)/); // Split text by ## at start of line or **\n\n    return parts.map((part, index) => {\n      if (part !== null && part !== void 0 && part.trim().startsWith(\"##\")) {\n        return /*#__PURE__*/_jsxDEV(\"h2\", {\n          style: {\n            fontWeight: \"bold\"\n          },\n          children: [part.trim().slice(2).trim(), \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }, this);\n      }\n      if (part.startsWith(\"**\") && part.endsWith(\"**\")) {\n        return /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [part.slice(2, -2), \" \"]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 13\n        }, this);\n      }\n      return part; // Return unmodified text for other parts\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: parseText(text)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 12\n  }, this);\n};\n_c = BoldText;\nexport default BoldText;\nvar _c;\n$RefreshReg$(_c, \"BoldText\");","map":{"version":3,"names":["BoldText","text","parseText","inputText","parts","split","map","part","index","trim","startsWith","_jsxDEV","style","fontWeight","children","slice","fileName","_jsxFileName","lineNumber","columnNumber","endsWith","_c","$RefreshReg$"],"sources":["/Users/ammarhussain/Desktop/TMF-frontend/src/components/BoldText.js"],"sourcesContent":["// const BoldText = ({ text }) => {\n//     const parseText = (inputText) => {\n//       const parts = inputText.split(/(\\*\\*.*?\\*\\*|##.*?##)/); \n//       return parts.map((part, index) => {\n//         if (part.startsWith(\"**\") && part.endsWith(\"**\")) {\n//           return (\n//             <strong key={index}>\n//               {part.slice(2, -2)} {/* Remove ** */}\n//             </strong>\n//           );\n//         }\n//         if (part.startsWith(\"##\") && part.endsWith(\"##\")) {\n//           return (\n//             <strong key={index} style={{ fontSize: \"larger\" }}>\n//               {part.slice(2, -2)} {/* Remove ## */}\n//             </strong>\n//           );\n//         }\n//         return part; \n//       });\n//     };\n  \n//     return <div>{parseText(text)}</div>;\n//   };\n\nconst BoldText = ({ text }) => {\n    const parseText = (inputText) => {\n      const parts = inputText.split(/(\\n## .*?(\\n|$)|\\*\\*.*?\\*\\*)/); // Split text by ## at start of line or **\n  \n      return parts.map((part, index) => {\n        if (part?.trim().startsWith(\"##\")) {\n          return (\n            <h2 key={index} style={{ fontWeight: \"bold\" }}>\n              {part.trim().slice(2).trim()} {/* Remove ## */}\n            </h2>\n          );\n        }\n        if (part.startsWith(\"**\") && part.endsWith(\"**\")) {\n          return (\n            <strong key={index}>\n              {part.slice(2, -2)} {/* Remove ** */}\n            </strong>\n          );\n        }\n        return part; // Return unmodified text for other parts\n      });\n    };\n  \n    return <div>{parseText(text)}</div>;\n  };\n\n  export default BoldText"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,MAAMA,QAAQ,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAC3B,MAAMC,SAAS,GAAIC,SAAS,IAAK;IAC/B,MAAMC,KAAK,GAAGD,SAAS,CAACE,KAAK,CAAC,8BAA8B,CAAC,CAAC,CAAC;;IAE/D,OAAOD,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAEC,KAAK,KAAK;MAChC,IAAID,IAAI,aAAJA,IAAI,eAAJA,IAAI,CAAEE,IAAI,CAAC,CAAC,CAACC,UAAU,CAAC,IAAI,CAAC,EAAE;QACjC,oBACEC,OAAA;UAAgBC,KAAK,EAAE;YAAEC,UAAU,EAAE;UAAO,CAAE;UAAAC,QAAA,GAC3CP,IAAI,CAACE,IAAI,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC,CAAC,CAACN,IAAI,CAAC,CAAC,EAAC,GAAC;QAAA,GADvBD,KAAK;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CAAC;MAET;MACA,IAAIZ,IAAI,CAACG,UAAU,CAAC,IAAI,CAAC,IAAIH,IAAI,CAACa,QAAQ,CAAC,IAAI,CAAC,EAAE;QAChD,oBACET,OAAA;UAAAG,QAAA,GACGP,IAAI,CAACQ,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAC,GAAC;QAAA,GADTP,KAAK;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEV,CAAC;MAEb;MACA,OAAOZ,IAAI,CAAC,CAAC;IACf,CAAC,CAAC;EACJ,CAAC;EAED,oBAAOI,OAAA;IAAAG,QAAA,EAAMZ,SAAS,CAACD,IAAI;EAAC;IAAAe,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;AACrC,CAAC;AAACE,EAAA,GAxBErB,QAAQ;AA0BZ,eAAeA,QAAQ;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}