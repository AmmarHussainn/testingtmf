{"ast":null,"code":"var util = require('util');\nvar escapeStringRegexp = require('escape-string-regexp');\nfunction HtmlDecorator(opts) {\n  var _opts = {\n    ignoreTexts: []\n  };\n  util._extend(_opts, opts);\n\n  //for english condition\n  this._symbols = ['(', '[?!,.<>　]', ')'];\n  this._opts = _opts;\n}\nutil._extend(HtmlDecorator.prototype, {\n  decorate: function (html, keywords, replace) {\n    return this._matchAndReplace(html, keywords, replace);\n  },\n  _isEnglish: function (text) {\n    return /^[\\d|a-zA-Z]+$/.test(text);\n  },\n  _buildSpaceSymbol: function (text) {\n    var result = text.replace(new RegExp(this._symbols.join(''), 'ig'), ' $1 ');\n    result = ` ${result} `;\n    return result;\n  },\n  _removeSpaceSymbol: function (text) {\n    var rSymbol = new RegExp(this._symbols.join(' '), 'g');\n    return text.replace(rSymbol, function (compareText) {\n      return compareText.replace(/ /g, '');\n    }).trim();\n  },\n  _splitIgnoringText: function (text) {\n    var ignoreTexts = this._opts.ignoreTexts;\n    var ignoreRegExpText = ignoreTexts.length != 0 ? `|${ignoreTexts.join('|')}` : '';\n    var splitRegExp = new RegExp(`(<\\/?[^>]*>${ignoreRegExpText})`, 'g');\n    return text.split(splitRegExp);\n  },\n  _escapedTextAsRegExpText(text) {\n    return escapedText = text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  },\n  _matchAndReplace: function (html, keywords, replace) {\n    var _this = this;\n    var text = _this._buildSpaceSymbol(html);\n    var compareTexts = _this._splitIgnoringText(text);\n    var existKeywordTexts = '';\n    var matches = [];\n    keywords.forEach(function (keyword) {\n      var separated = _this._isEnglish(keyword) ? ' ' : '';\n      var matchWholeKeyword = `${separated}${keyword}${separated}`;\n      if (keyword && text != keyword && !new RegExp(_this._escapedTextAsRegExpText(matchWholeKeyword), 'i').test(existKeywordTexts)) {\n        var rWord = new RegExp(`${separated}${escapeStringRegexp(keyword.replace(/\\./g, ' \\. '))}${separated}`, 'ig');\n        compareTexts = compareTexts.map(function (compareText, index) {\n          if (index % 2 === 0 && compareText) {\n            var start = compareText.search(rWord);\n            if (start > -1) {\n              compareText = compareText.replace(rWord, function (matchText, startIndex, completeText) {\n                var rRemoveSpaceBetweenDotAndEN = /([a-z]+) +(\\.) ?/ig;\n                var result = matchText.trim().replace(rRemoveSpaceBetweenDotAndEN, '$1$2');\n                return `${separated}${replace(result, {\n                  hit: keyword\n                })}${separated}`;\n              });\n              matches.push(keyword);\n              existKeywordTexts += matchWholeKeyword;\n            }\n          }\n          return compareText;\n        });\n      }\n    });\n    var combineText = compareTexts.join('');\n    return {\n      text: _this._removeSpaceSymbol(combineText),\n      matches: matches\n    };\n  }\n});\nmodule.exports = HtmlDecorator;","map":{"version":3,"names":["util","require","escapeStringRegexp","HtmlDecorator","opts","_opts","ignoreTexts","_extend","_symbols","prototype","decorate","html","keywords","replace","_matchAndReplace","_isEnglish","text","test","_buildSpaceSymbol","result","RegExp","join","_removeSpaceSymbol","rSymbol","compareText","trim","_splitIgnoringText","ignoreRegExpText","length","splitRegExp","split","_escapedTextAsRegExpText","escapedText","_this","compareTexts","existKeywordTexts","matches","forEach","keyword","separated","matchWholeKeyword","rWord","map","index","start","search","matchText","startIndex","completeText","rRemoveSpaceBetweenDotAndEN","hit","push","combineText","module","exports"],"sources":["/Users/ammarhussain/Desktop/TMF-frontend/node_modules/text-decorator/src/HtmlDecorator.js"],"sourcesContent":["\nvar util = require('util');\nvar escapeStringRegexp = require('escape-string-regexp');\n\nfunction HtmlDecorator( opts ) {\n\n  var _opts = {\n    ignoreTexts:[]\n  };\n\n  util._extend(_opts, opts);\n\n  //for english condition\n  this._symbols = ['(', '[?!,.<>　]' , ')'];\n  this._opts = _opts;\n}\n\nutil._extend(HtmlDecorator.prototype, {\n\n  decorate: function(html, keywords, replace) {\n    return this._matchAndReplace(html, keywords, replace);\n  },\n\n  _isEnglish:function( text ) {\n    return /^[\\d|a-zA-Z]+$/.test( text );\n  },\n\n  _buildSpaceSymbol:function( text ) {\n    var result = text.replace(new RegExp(this._symbols.join(''), 'ig'), ' $1 ');\n    result = ` ${result} `;\n    return result;\n  },\n\n  _removeSpaceSymbol:function( text ) {\n    var rSymbol = new RegExp(this._symbols.join(' '), 'g');\n    return text.replace(rSymbol, function ( compareText ) { return compareText.replace(/ /g, ''); }).trim();\n  },\n\n  _splitIgnoringText: function( text ) {\n    var ignoreTexts = this._opts.ignoreTexts;\n    var ignoreRegExpText = ignoreTexts.length != 0 ? `|${ignoreTexts.join('|')}` : '';\n    var splitRegExp = new RegExp(`(<\\/?[^>]*>${ignoreRegExpText})`, 'g');\n    return text.split(splitRegExp);\n  },\n\n  _escapedTextAsRegExpText(text) {\n    return escapedText = text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n  },\n\n  _matchAndReplace:function(html, keywords, replace) {\n    var _this = this;\n    var text = _this._buildSpaceSymbol( html );\n    var compareTexts = _this._splitIgnoringText( text );\n    var existKeywordTexts = '';\n    var matches = [];\n\n    keywords.forEach(function( keyword ){\n\n      var separated = _this._isEnglish( keyword ) ? ' ' : '';\n      var matchWholeKeyword = `${separated}${keyword}${separated}`;\n\n      if ( keyword && text != keyword && !(new RegExp(_this._escapedTextAsRegExpText(matchWholeKeyword), 'i').test(existKeywordTexts)) ) {\n        var rWord = new RegExp(`${separated}${escapeStringRegexp(keyword.replace(/\\./g, ' \\. '))}${separated}`, 'ig');\n\n        compareTexts = compareTexts.map(function(compareText, index){\n          if (index % 2 === 0 && compareText) {\n            var start = compareText.search(rWord);\n\n            if (start > -1) {\n              compareText = compareText.replace(rWord, function(matchText, startIndex, completeText){\n                var rRemoveSpaceBetweenDotAndEN = /([a-z]+) +(\\.) ?/ig;\n                var result = matchText.trim().replace(rRemoveSpaceBetweenDotAndEN, '$1$2');\n                return `${separated}${replace(result,{hit:keyword})}${separated}`;\n              });\n              matches.push(keyword);\n              existKeywordTexts += matchWholeKeyword;\n            }\n\n          }\n\n          return compareText;\n        });\n      }\n\n    });\n\n    var combineText = compareTexts.join('');\n    return {text:_this._removeSpaceSymbol(combineText), matches:matches};\n  }\n\n});\n\nmodule.exports = HtmlDecorator;\n\n"],"mappings":"AACA,IAAIA,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC1B,IAAIC,kBAAkB,GAAGD,OAAO,CAAC,sBAAsB,CAAC;AAExD,SAASE,aAAaA,CAAEC,IAAI,EAAG;EAE7B,IAAIC,KAAK,GAAG;IACVC,WAAW,EAAC;EACd,CAAC;EAEDN,IAAI,CAACO,OAAO,CAACF,KAAK,EAAED,IAAI,CAAC;;EAEzB;EACA,IAAI,CAACI,QAAQ,GAAG,CAAC,GAAG,EAAE,WAAW,EAAG,GAAG,CAAC;EACxC,IAAI,CAACH,KAAK,GAAGA,KAAK;AACpB;AAEAL,IAAI,CAACO,OAAO,CAACJ,aAAa,CAACM,SAAS,EAAE;EAEpCC,QAAQ,EAAE,SAAAA,CAASC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IAC1C,OAAO,IAAI,CAACC,gBAAgB,CAACH,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;EACvD,CAAC;EAEDE,UAAU,EAAC,SAAAA,CAAUC,IAAI,EAAG;IAC1B,OAAO,gBAAgB,CAACC,IAAI,CAAED,IAAK,CAAC;EACtC,CAAC;EAEDE,iBAAiB,EAAC,SAAAA,CAAUF,IAAI,EAAG;IACjC,IAAIG,MAAM,GAAGH,IAAI,CAACH,OAAO,CAAC,IAAIO,MAAM,CAAC,IAAI,CAACZ,QAAQ,CAACa,IAAI,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,EAAE,MAAM,CAAC;IAC3EF,MAAM,GAAG,IAAIA,MAAM,GAAG;IACtB,OAAOA,MAAM;EACf,CAAC;EAEDG,kBAAkB,EAAC,SAAAA,CAAUN,IAAI,EAAG;IAClC,IAAIO,OAAO,GAAG,IAAIH,MAAM,CAAC,IAAI,CAACZ,QAAQ,CAACa,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC;IACtD,OAAOL,IAAI,CAACH,OAAO,CAACU,OAAO,EAAE,UAAWC,WAAW,EAAG;MAAE,OAAOA,WAAW,CAACX,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IAAE,CAAC,CAAC,CAACY,IAAI,CAAC,CAAC;EACzG,CAAC;EAEDC,kBAAkB,EAAE,SAAAA,CAAUV,IAAI,EAAG;IACnC,IAAIV,WAAW,GAAG,IAAI,CAACD,KAAK,CAACC,WAAW;IACxC,IAAIqB,gBAAgB,GAAGrB,WAAW,CAACsB,MAAM,IAAI,CAAC,GAAG,IAAItB,WAAW,CAACe,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,EAAE;IACjF,IAAIQ,WAAW,GAAG,IAAIT,MAAM,CAAC,cAAcO,gBAAgB,GAAG,EAAE,GAAG,CAAC;IACpE,OAAOX,IAAI,CAACc,KAAK,CAACD,WAAW,CAAC;EAChC,CAAC;EAEDE,wBAAwBA,CAACf,IAAI,EAAE;IAC7B,OAAOgB,WAAW,GAAGhB,IAAI,CAACH,OAAO,CAAC,0BAA0B,EAAE,MAAM,CAAC;EACvE,CAAC;EAEDC,gBAAgB,EAAC,SAAAA,CAASH,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;IACjD,IAAIoB,KAAK,GAAG,IAAI;IAChB,IAAIjB,IAAI,GAAGiB,KAAK,CAACf,iBAAiB,CAAEP,IAAK,CAAC;IAC1C,IAAIuB,YAAY,GAAGD,KAAK,CAACP,kBAAkB,CAAEV,IAAK,CAAC;IACnD,IAAImB,iBAAiB,GAAG,EAAE;IAC1B,IAAIC,OAAO,GAAG,EAAE;IAEhBxB,QAAQ,CAACyB,OAAO,CAAC,UAAUC,OAAO,EAAE;MAElC,IAAIC,SAAS,GAAGN,KAAK,CAAClB,UAAU,CAAEuB,OAAQ,CAAC,GAAG,GAAG,GAAG,EAAE;MACtD,IAAIE,iBAAiB,GAAG,GAAGD,SAAS,GAAGD,OAAO,GAAGC,SAAS,EAAE;MAE5D,IAAKD,OAAO,IAAItB,IAAI,IAAIsB,OAAO,IAAI,CAAE,IAAIlB,MAAM,CAACa,KAAK,CAACF,wBAAwB,CAACS,iBAAiB,CAAC,EAAE,GAAG,CAAC,CAACvB,IAAI,CAACkB,iBAAiB,CAAE,EAAG;QACjI,IAAIM,KAAK,GAAG,IAAIrB,MAAM,CAAC,GAAGmB,SAAS,GAAGrC,kBAAkB,CAACoC,OAAO,CAACzB,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,GAAG0B,SAAS,EAAE,EAAE,IAAI,CAAC;QAE7GL,YAAY,GAAGA,YAAY,CAACQ,GAAG,CAAC,UAASlB,WAAW,EAAEmB,KAAK,EAAC;UAC1D,IAAIA,KAAK,GAAG,CAAC,KAAK,CAAC,IAAInB,WAAW,EAAE;YAClC,IAAIoB,KAAK,GAAGpB,WAAW,CAACqB,MAAM,CAACJ,KAAK,CAAC;YAErC,IAAIG,KAAK,GAAG,CAAC,CAAC,EAAE;cACdpB,WAAW,GAAGA,WAAW,CAACX,OAAO,CAAC4B,KAAK,EAAE,UAASK,SAAS,EAAEC,UAAU,EAAEC,YAAY,EAAC;gBACpF,IAAIC,2BAA2B,GAAG,oBAAoB;gBACtD,IAAI9B,MAAM,GAAG2B,SAAS,CAACrB,IAAI,CAAC,CAAC,CAACZ,OAAO,CAACoC,2BAA2B,EAAE,MAAM,CAAC;gBAC1E,OAAO,GAAGV,SAAS,GAAG1B,OAAO,CAACM,MAAM,EAAC;kBAAC+B,GAAG,EAACZ;gBAAO,CAAC,CAAC,GAAGC,SAAS,EAAE;cACnE,CAAC,CAAC;cACFH,OAAO,CAACe,IAAI,CAACb,OAAO,CAAC;cACrBH,iBAAiB,IAAIK,iBAAiB;YACxC;UAEF;UAEA,OAAOhB,WAAW;QACpB,CAAC,CAAC;MACJ;IAEF,CAAC,CAAC;IAEF,IAAI4B,WAAW,GAAGlB,YAAY,CAACb,IAAI,CAAC,EAAE,CAAC;IACvC,OAAO;MAACL,IAAI,EAACiB,KAAK,CAACX,kBAAkB,CAAC8B,WAAW,CAAC;MAAEhB,OAAO,EAACA;IAAO,CAAC;EACtE;AAEF,CAAC,CAAC;AAEFiB,MAAM,CAACC,OAAO,GAAGnD,aAAa","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}